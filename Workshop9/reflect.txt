In this workshop we learned how to pass an object's raw pointer by turning it into a unique smart pointer that provides exception safety for dynamically allocated memory, which only happened if both elements of a matching pair were found through the double loop that looped through all combinations of both indexes. 
It also allowed us to pass ownership of the product object to an operator overload of the list object. Memory management is left to the work of the product smart pointer which owns it's own resource and is then transferred to the list member function in move construction and move assignment.